Building Pipeline:
1> Create a GitHub repo and clone it in local (Add experiments).
2> Add src folder along with all components(run them individually).
3> Add data, models, reports directories to .gitignore file---coz we dont want this to be tracked by git as size may be too long we will track it by dvc
4> Now git add, commit, push
git add .
git commit -m "pipeline ready with all component"
git push origin main

Setting up dcv pipeline (without params)
5> Create dvc.yaml file and add stages to it.
without dvc you cant run yaml or pipeline
6> 'dvc init' then do "dvc repro" to test the pipeline automation. (check dvc dag--it vizualises pipeline(directed acyclic grapgh))---python -m dvc init
after this you will get dvc.lock file wheere you will get one hash value for every stage and its output
so you need to commit this with git do that whenever you roll back that stage will be rolled or restored
7> Now git add, commit, push

whatever you have written those configuration params like test_size and all you may change it later so better practice it to store in one file

Setting up dcv pipeline (with params)
8> add params.yaml file
9> Add the params setup (mentioned below)
data_ingestion:
  test_size: 0.20
feature_engineering:
  max_features: 50
model_building:
  n_estimators: 25
  random_state: 2

also add that load params code in some files ingestion feature eng and model building
10> Do "dvc repro" again to test the pipeline along with the params
11> Now git add, commit, push

with help of dvc
so in yaml you are automating these pipeline execuation




there are mlops tools helps in experiment tracking. there are many tools other than dvc first we learn  with dvc
Expermients with DVC:
12> pip install dvclive
13> Add the dvclive code block (mentioned below) in model evaluations
14> Do "dvc exp run", it will create a new dvc.yaml(if already not there) and dvclive directory (each run will be considered as an experiment by DVC)
15> Do "dvc exp show" on terminal to see the experiments or use extension on VSCode (install dvc extension)
16> Do "dvc exp remove {exp-name}" to remove exp (optional) | "dvc exp apply {exp-name}" to reproduce prev exp
17> Change params, re-run code (produce new experiments)
18> Now git add, commit, push


Adding remote s3 storage to dvc

1. create i am user in aws
2. In that acreate access key
3. create s3 bucket
4. pip install dvc[s3]-- connects dvc with s3
5. pip install awscli
6. aws configure--on terminal
7. dvc remote add -d dvcstore[anyname] s3://bucketname---check config file of .dvc
now you check which experiment output you want to push using dvc exp apply exp-name

also remember when yo add outs in dvc.yaml whatever is there it is tracked by dvc
8. dvc commit push the experiment
dvc commit
in s3 bucket is empty
9.now dvc push 
so whatever is there is outs of dvc yaml that is stored in s3
10. finally git add commit push

check if error
pip install --upgrade boto3 botocore
pip install --upgrade "dvc[s3]"
pip show boto3 botocore dvc





-------------------------------------------------------------------------------

params.yaml setup:
1> import yaml
2> add func:
def load_params(params_path: str) -> dict:
    """Load parameters from a YAML file."""
    try:
        with open(params_path, 'r') as file:
            params = yaml.safe_load(file)
        logger.debug('Parameters retrieved from %s', params_path)
        return params
    except FileNotFoundError:
        logger.error('File not found: %s', params_path)
        raise
    except yaml.YAMLError as e:
        logger.error('YAML error: %s', e)
        raise
    except Exception as e:
        logger.error('Unexpected error: %s', e)
        raise
3> Add to main():

# data_ingestion
params = load_params(params_path='params.yaml')
test_size = params['data_ingestion']['test_size']

# feature_engineering
params = load_params(params_path='params.yaml')
max_features = params['feature_engineering']['max_features']

# model_building
params = load_params('params.yaml')['model_building']

also add params in dvc.yaml

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

dvclive code block:
1> import dvclive and yaml:
from dvclive import Live
import yaml
2> Add the load_params function and initiate "params" var in main--params = load_params(params_path='params.yaml')
3> Add below code block to main:
with Live(save_dvc_exp=True) as live:
    live.log_metric('accuracy', accuracy_score(y_test, y_test))
    live.log_metric('precision', precision_score(y_test, y_test))
    live.log_metric('recall', recall_score(y_test, y_test))

    live.log_params(params)